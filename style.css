<script>
document.addEventListener('DOMContentLoaded', () => {
    const portfolioData = [
        { id: "Electronics", title: "Electronics: Gadgets & Gizmos", thumbnail: "./images/category-thumbnails/Electronics.jpg", folder: "./images/project-Electronics/", imageCount: 15, extension: "jpg" },
        { id: "props", title: "Props & Creatures: Game Assets", thumbnail: "./images/category-thumbnails/props.jpg", folder: "./images/project-props/", imageCount: 15, extension: "jpg" },
        { id: "environments", title: "Environment Design: 'The Lost Valley'", thumbnail: "./images/category-thumbnails/environments.jpg", folder: "./images/project-environments/", imageCount: 15, extension: "jpg" },
        { id: "product-design", title: "Product Design: 'Chronos Watch'", thumbnail: "./images/category-thumbnails/product-design.jpg", folder: "./images/project-product-design/", imageCount: 15, extension: "jpg" },
        { id: "Web-Logo-Design", title: "Web & Logo Design: Branding", thumbnail: "./images/category-thumbnails/Web-&-Logo-Design.jpg", folder: "./images/project-Web-Logo-Design/", imageCount: 15, extension: "jpg" }
    ];

    // ==================================================================
    // === CORE WEBSITE LOGIC (No need to edit below this line) ===
    // ==================================================================
    const track = document.querySelector('.carousel-track');
    if (track) {
        portfolioData.forEach(project => {
            const slide = document.createElement('div');
            slide.className = 'category-item';
            slide.dataset.projectId = project.id;
            slide.innerHTML = `<div class="category-item-inner"><img src="${project.thumbnail}" alt="${project.title}"><div class="item-caption"><h3>${project.title.split(':')[0]}</h3></div></div>`;
            track.appendChild(slide);
        });
    }
    
    // --- Mobile Navigation ---
    const mobileNavToggle = document.querySelector('.mobile-nav-toggle');
    const mainNav = document.querySelector('.main-nav');
    mobileNavToggle.addEventListener('click', () => {
        const isOpen = mainNav.classList.toggle('is-open');
        mobileNavToggle.setAttribute('aria-expanded', isOpen);
        document.body.classList.toggle('no-scroll', isOpen);
        mobileNavToggle.textContent = isOpen ? '×' : '☰';
    });
    document.querySelectorAll('.main-nav .nav-link').forEach(link => {
        link.addEventListener('click', () => {
            if(mainNav.classList.contains('is-open')) {
                mainNav.classList.remove('is-open');
                document.body.classList.remove('no-scroll');
                mobileNavToggle.textContent = '☰';
            }
        });
    });

    const spotlight = document.getElementById('spotlight-effect');
    window.addEventListener('mousemove', (e) => { requestAnimationFrame(() => { spotlight.style.setProperty('--x', `${e.clientX}px`); spotlight.style.setProperty('--y', `${e.clientY}px`); }); });
    
    document.querySelectorAll('.nav-link').forEach(link => { link.addEventListener('click', (e) => { e.preventDefault(); document.querySelector(link.getAttribute('href')).scrollIntoView({ behavior: 'smooth' }); }); });

    const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { entry.target.classList.add('is-visible'); observer.unobserve(entry.target); } }); }, { threshold: 0.1 });
    document.querySelectorAll('.reveal-on-scroll, .reveal-line, .skills-list li').forEach(el => observer.observe(el));

    if (track && portfolioData.length > 0) {
        const slides = Array.from(track.children);
        const carouselViewport = document.querySelector('.carousel-viewport');
        const nextButton = document.getElementById('next-btn');
        const prevButton = document.getElementById('prev-btn');
        
        let startIndex = portfolioData.findIndex(p => p.id === "environments");
        if (startIndex === -1) startIndex = Math.floor(slides.length / 2);
        let currentIndex = startIndex;
        
        const updateCarousel = (instant = false) => {
            if (instant) track.classList.add('no-transition');
            else track.classList.remove('no-transition');
            
            const activeSlide = slides[currentIndex];
            if (!activeSlide) return;
            const offset = (carouselViewport.offsetWidth / 2) - (activeSlide.offsetWidth / 2) - activeSlide.offsetLeft;
            track.style.transform = `translateX(${offset}px)`;
            slides.forEach(s => s.classList.remove('slide-active'));
            activeSlide.classList.add('slide-active');
        };
        
        const moveTo = (index) => { currentIndex = (index + slides.length) % slides.length; updateCarousel(); };
        
        nextButton.addEventListener('click', () => moveTo(currentIndex + 1));
        prevButton.addEventListener('click', () => moveTo(currentIndex - 1));
        window.addEventListener('resize', () => updateCarousel(true));

        // --- NEW & IMPROVED CAROUSEL SWIPE LOGIC ---
        let isDragging = false, startX, currentTranslate, animationFrame;
        
        function getPositionX(e) {
            return e.type.includes('mouse') ? e.pageX : e.touches[0].clientX;
        }

        function touchStart(e) {
            isDragging = true;
            startX = getPositionX(e);
            const transformMatrix = new WebKitCSSMatrix(window.getComputedStyle(track).transform);
            currentTranslate = transformMatrix.m41;
            track.classList.add('no-transition');
            cancelAnimationFrame(animationFrame);
        }

        function touchMove(e) {
            if (!isDragging) return;
            const currentPosition = getPositionX(e);
            const move = currentPosition - startX;
            track.style.transform = `translateX(${currentTranslate + move}px)`;
        }

        function touchEnd() {
            if (!isDragging) return;
            isDragging = false;
            const transformMatrix = new WebKitCSSMatrix(window.getComputedStyle(track).transform);
            const endTranslate = transformMatrix.m41;
            const movedBy = endTranslate - currentTranslate;

            track.classList.remove('no-transition');

            // If swiped more than 50px, move to next/prev slide
            if (movedBy < -50) {
                moveTo(currentIndex + 1);
            } else if (movedBy > 50) {
                moveTo(currentIndex - 1);
            } else {
                // Otherwise, snap back to the current slide
                updateCarousel();
            }
        }

        carouselViewport.addEventListener('mousedown', touchStart);
        carouselViewport.addEventListener('touchstart', touchStart, { passive: true });

        carouselViewport.addEventListener('mousemove', touchMove);
        carouselViewport.addEventListener('touchmove', touchMove, { passive: true });

        document.addEventListener('mouseup', touchEnd);
        document.addEventListener('touchend', touchEnd);


        // --- Lightbox Logic ---
        const lightboxOverlay = document.getElementById('lightbox-overlay');
        const lightboxImg = document.getElementById('lightbox-img');
        const lightboxCaption = document.getElementById('lightbox-caption');
        const lightboxCounter = document.getElementById('lightbox-counter');
        let currentGalleryImages = [];
        let currentGalleryIndex = 0;

        const updateLightboxImage = () => {
            if (currentGalleryImages.length > 0) {
                lightboxImg.classList.remove('loaded');
                const img = new Image();
                img.src = currentGalleryImages[currentGalleryIndex];
                img.onload = () => {
                    lightboxImg.src = img.src;
                    lightboxImg.classList.add('loaded');
                    lightboxCounter.textContent = `${currentGalleryIndex + 1} / ${currentGalleryImages.length}`;
                };
            }
        };
        
        const showLightbox = (projectId) => {
            const project = portfolioData.find(p => p.id === projectId);
            if (!project || !project.imageCount) return;

            currentGalleryImages = [];
            for (let i = 1; i <= project.imageCount; i++) {
                const number = String(i).padStart(2, '0');
                currentGalleryImages.push(`${project.folder}${number}.${project.extension}`);
            }

            currentGalleryIndex = 0;
            lightboxCaption.textContent = project.title.split(':')[0];
            
            updateLightboxImage();
            lightboxOverlay.classList.add('visible');
            document.body.style.overflow = 'hidden';
        };

        const hideLightbox = () => { lightboxOverlay.classList.remove('visible'); document.body.style.overflow = ''; };

        document.getElementById('lightbox-next').addEventListener('click', () => { currentGalleryIndex = (currentGalleryIndex + 1) % currentGalleryImages.length; updateLightboxImage(); });
        document.getElementById('lightbox-prev').addEventListener('click', () => { currentGalleryIndex = (currentGalleryIndex - 1 + currentGalleryImages.length) % currentGalleryImages.length; updateLightboxImage(); });
        
        slides.forEach((slide, index) => {
            slide.addEventListener('click', (e) => { 
                // Only open lightbox if it wasn't a drag
                const transformMatrix = new WebKitCSSMatrix(window.getComputedStyle(track).transform);
                const endTranslate = transformMatrix.m41;
                const movedBy = Math.abs(endTranslate - currentTranslate);
                if (movedBy > 5) return;

                if (index === currentIndex) {
                    showLightbox(slide.dataset.projectId);
                } else {
                    moveTo(index);
                }
            });
        });
        
        document.querySelector('.lightbox-close-btn').addEventListener('click', hideLightbox);
        updateCarousel(true);
    }
});
</script>
